version: '3.9'

services:
  event-processor:
    build:
      context: .
      dockerfile: Dockerfile.dockerhub
      args:
        - NETWORK=${NETWORK}
        - SKIP_BUILD=true
    entrypoint: 'npm run dev'
    environment:
      - PINATA_SDK_KEY=${PINATA_SDK_KEY}
      - PINATA_SDK_SECRET=${PINATA_SDK_SECRET}
      - IPFS_GATEWAY_URL=${IPFS_GATEWAY_URL}
      - SHOULD_PROCESS_PAST_EVENTS=${SHOULD_PROCESS_PAST_EVENTS}
      - PRIMARY_RPC_URL=${PRIMARY_RPC_URL}
      - PRIMARY_RPC_ACCESS_TOKEN=${PRIMARY_RPC_ACCESS_TOKEN}
      - SECONDARY_RPC_URL=${SECONDARY_RPC_URL}
      - SECONDARY_RPC_ACCESS_TOKEN=${SECONDARY_RPC_ACCESS_TOKEN}
      - NETWORK=${NETWORK}
      - POLLING_INTERVAL=${POLLING_INTERVAL}
      - CHUNK_SIZE=${CHUNK_SIZE}
      - CONFIRMATIONS=${CONFIRMATIONS}
      - SHOULD_START_MONITORING_UI=true
      - REDIS_CONNECTION_STRING=redis://redis:6379
      - POSTGRES_CONNECTION_STRING=postgresql://user:admin@postgres:5432/dripsdb
      - LOG_LEVEL=debug
      - MONITORING_UI_PORT=3001
    volumes:
      - .:/app
    ports:
      - '3001:3001'
    networks:
      - backend
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:latest
    container_name: postgres_container
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: dripsdb
      POSTGRES_INITDB_ARGS: -E UTF8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '54320:5432'
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_container
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: 2@2.com
      PGADMIN_DEFAULT_PASSWORD: admin
      POSTGRES_DB: drips
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json
    ports:
      - '5050:80'
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis_container
    restart: unless-stopped
    ports:
      - '6379:6379'
    networks:
      - backend

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight_container
    restart: unless-stopped
    volumes:
      - redisinsight:/db
    ports:
      - '8002:8001'

volumes:
  postgres_data:
  pgadmin_data:
  redisinsight:

networks:
  backend:
